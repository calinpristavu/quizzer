// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/calinpristavu/quizzer/ent/quiz"
	"github.com/facebookincubator/ent/dialect/sql"
)

// QuizCreate is the builder for creating a Quiz entity.
type QuizCreate struct {
	config
	name      *string
	active    *bool
	score     *uint
	corrected *bool
}

// SetName sets the name field.
func (qc *QuizCreate) SetName(s string) *QuizCreate {
	qc.name = &s
	return qc
}

// SetActive sets the active field.
func (qc *QuizCreate) SetActive(b bool) *QuizCreate {
	qc.active = &b
	return qc
}

// SetNillableActive sets the active field if the given value is not nil.
func (qc *QuizCreate) SetNillableActive(b *bool) *QuizCreate {
	if b != nil {
		qc.SetActive(*b)
	}
	return qc
}

// SetScore sets the score field.
func (qc *QuizCreate) SetScore(u uint) *QuizCreate {
	qc.score = &u
	return qc
}

// SetCorrected sets the corrected field.
func (qc *QuizCreate) SetCorrected(b bool) *QuizCreate {
	qc.corrected = &b
	return qc
}

// SetNillableCorrected sets the corrected field if the given value is not nil.
func (qc *QuizCreate) SetNillableCorrected(b *bool) *QuizCreate {
	if b != nil {
		qc.SetCorrected(*b)
	}
	return qc
}

// Save creates the Quiz in the database.
func (qc *QuizCreate) Save(ctx context.Context) (*Quiz, error) {
	if qc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if qc.active == nil {
		v := quiz.DefaultActive
		qc.active = &v
	}
	if qc.score == nil {
		return nil, errors.New("ent: missing required field \"score\"")
	}
	if qc.corrected == nil {
		v := quiz.DefaultCorrected
		qc.corrected = &v
	}
	return qc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuizCreate) SaveX(ctx context.Context) *Quiz {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (qc *QuizCreate) sqlSave(ctx context.Context) (*Quiz, error) {
	var (
		res sql.Result
		q   = &Quiz{config: qc.config}
	)
	tx, err := qc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	builder := sql.Dialect(qc.driver.Dialect()).
		Insert(quiz.Table).
		Default()
	if value := qc.name; value != nil {
		builder.Set(quiz.FieldName, *value)
		q.Name = *value
	}
	if value := qc.active; value != nil {
		builder.Set(quiz.FieldActive, *value)
		q.Active = *value
	}
	if value := qc.score; value != nil {
		builder.Set(quiz.FieldScore, *value)
		q.Score = *value
	}
	if value := qc.corrected; value != nil {
		builder.Set(quiz.FieldCorrected, *value)
		q.Corrected = *value
	}
	query, args := builder.Query()
	if err := tx.Exec(ctx, query, args, &res); err != nil {
		return nil, rollback(tx, err)
	}
	id, err := res.LastInsertId()
	if err != nil {
		return nil, rollback(tx, err)
	}
	q.ID = int(id)
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return q, nil
}
