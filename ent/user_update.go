// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/calinpristavu/quizzer/ent/predicate"
	"github.com/calinpristavu/quizzer/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	username             *string
	password             *string
	role_id              *int
	addrole_id           *int
	is_enabled           *bool
	should_start_id      *int
	addshould_start_id   *int
	clearshould_start_id bool
	comments             *string
	recruitee_id         *int
	addrecruitee_id      *int
	predicates           []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetUsername sets the username field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.username = &s
	return uu
}

// SetPassword sets the password field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.password = &s
	return uu
}

// SetRoleID sets the role_id field.
func (uu *UserUpdate) SetRoleID(i int) *UserUpdate {
	uu.role_id = &i
	uu.addrole_id = nil
	return uu
}

// SetNillableRoleID sets the role_id field if the given value is not nil.
func (uu *UserUpdate) SetNillableRoleID(i *int) *UserUpdate {
	if i != nil {
		uu.SetRoleID(*i)
	}
	return uu
}

// AddRoleID adds i to role_id.
func (uu *UserUpdate) AddRoleID(i int) *UserUpdate {
	if uu.addrole_id == nil {
		uu.addrole_id = &i
	} else {
		*uu.addrole_id += i
	}
	return uu
}

// SetIsEnabled sets the is_enabled field.
func (uu *UserUpdate) SetIsEnabled(b bool) *UserUpdate {
	uu.is_enabled = &b
	return uu
}

// SetNillableIsEnabled sets the is_enabled field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsEnabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsEnabled(*b)
	}
	return uu
}

// SetShouldStartID sets the should_start_id field.
func (uu *UserUpdate) SetShouldStartID(i int) *UserUpdate {
	uu.should_start_id = &i
	uu.addshould_start_id = nil
	return uu
}

// SetNillableShouldStartID sets the should_start_id field if the given value is not nil.
func (uu *UserUpdate) SetNillableShouldStartID(i *int) *UserUpdate {
	if i != nil {
		uu.SetShouldStartID(*i)
	}
	return uu
}

// AddShouldStartID adds i to should_start_id.
func (uu *UserUpdate) AddShouldStartID(i int) *UserUpdate {
	if uu.addshould_start_id == nil {
		uu.addshould_start_id = &i
	} else {
		*uu.addshould_start_id += i
	}
	return uu
}

// ClearShouldStartID clears the value of should_start_id.
func (uu *UserUpdate) ClearShouldStartID() *UserUpdate {
	uu.should_start_id = nil
	uu.clearshould_start_id = true
	return uu
}

// SetComments sets the comments field.
func (uu *UserUpdate) SetComments(s string) *UserUpdate {
	uu.comments = &s
	return uu
}

// SetRecruiteeID sets the recruitee_id field.
func (uu *UserUpdate) SetRecruiteeID(i int) *UserUpdate {
	uu.recruitee_id = &i
	uu.addrecruitee_id = nil
	return uu
}

// AddRecruiteeID adds i to recruitee_id.
func (uu *UserUpdate) AddRecruiteeID(i int) *UserUpdate {
	if uu.addrecruitee_id == nil {
		uu.addrecruitee_id = &i
	} else {
		*uu.addrecruitee_id += i
	}
	return uu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return uu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	selector := sql.Select(user.FieldID).From(sql.Table(user.Table))
	for _, p := range uu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = uu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := uu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		builder = sql.Update(user.Table).Where(sql.InInts(user.FieldID, ids...))
	)
	if value := uu.username; value != nil {
		builder.Set(user.FieldUsername, *value)
	}
	if value := uu.password; value != nil {
		builder.Set(user.FieldPassword, *value)
	}
	if value := uu.role_id; value != nil {
		builder.Set(user.FieldRoleID, *value)
	}
	if value := uu.addrole_id; value != nil {
		builder.Add(user.FieldRoleID, *value)
	}
	if value := uu.is_enabled; value != nil {
		builder.Set(user.FieldIsEnabled, *value)
	}
	if value := uu.should_start_id; value != nil {
		builder.Set(user.FieldShouldStartID, *value)
	}
	if value := uu.addshould_start_id; value != nil {
		builder.Add(user.FieldShouldStartID, *value)
	}
	if uu.clearshould_start_id {
		builder.SetNull(user.FieldShouldStartID)
	}
	if value := uu.comments; value != nil {
		builder.Set(user.FieldComments, *value)
	}
	if value := uu.recruitee_id; value != nil {
		builder.Set(user.FieldRecruiteeID, *value)
	}
	if value := uu.addrecruitee_id; value != nil {
		builder.Add(user.FieldRecruiteeID, *value)
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	id                   int
	username             *string
	password             *string
	role_id              *int
	addrole_id           *int
	is_enabled           *bool
	should_start_id      *int
	addshould_start_id   *int
	clearshould_start_id bool
	comments             *string
	recruitee_id         *int
	addrecruitee_id      *int
}

// SetUsername sets the username field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.username = &s
	return uuo
}

// SetPassword sets the password field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.password = &s
	return uuo
}

// SetRoleID sets the role_id field.
func (uuo *UserUpdateOne) SetRoleID(i int) *UserUpdateOne {
	uuo.role_id = &i
	uuo.addrole_id = nil
	return uuo
}

// SetNillableRoleID sets the role_id field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoleID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetRoleID(*i)
	}
	return uuo
}

// AddRoleID adds i to role_id.
func (uuo *UserUpdateOne) AddRoleID(i int) *UserUpdateOne {
	if uuo.addrole_id == nil {
		uuo.addrole_id = &i
	} else {
		*uuo.addrole_id += i
	}
	return uuo
}

// SetIsEnabled sets the is_enabled field.
func (uuo *UserUpdateOne) SetIsEnabled(b bool) *UserUpdateOne {
	uuo.is_enabled = &b
	return uuo
}

// SetNillableIsEnabled sets the is_enabled field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsEnabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsEnabled(*b)
	}
	return uuo
}

// SetShouldStartID sets the should_start_id field.
func (uuo *UserUpdateOne) SetShouldStartID(i int) *UserUpdateOne {
	uuo.should_start_id = &i
	uuo.addshould_start_id = nil
	return uuo
}

// SetNillableShouldStartID sets the should_start_id field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableShouldStartID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetShouldStartID(*i)
	}
	return uuo
}

// AddShouldStartID adds i to should_start_id.
func (uuo *UserUpdateOne) AddShouldStartID(i int) *UserUpdateOne {
	if uuo.addshould_start_id == nil {
		uuo.addshould_start_id = &i
	} else {
		*uuo.addshould_start_id += i
	}
	return uuo
}

// ClearShouldStartID clears the value of should_start_id.
func (uuo *UserUpdateOne) ClearShouldStartID() *UserUpdateOne {
	uuo.should_start_id = nil
	uuo.clearshould_start_id = true
	return uuo
}

// SetComments sets the comments field.
func (uuo *UserUpdateOne) SetComments(s string) *UserUpdateOne {
	uuo.comments = &s
	return uuo
}

// SetRecruiteeID sets the recruitee_id field.
func (uuo *UserUpdateOne) SetRecruiteeID(i int) *UserUpdateOne {
	uuo.recruitee_id = &i
	uuo.addrecruitee_id = nil
	return uuo
}

// AddRecruiteeID adds i to recruitee_id.
func (uuo *UserUpdateOne) AddRecruiteeID(i int) *UserUpdateOne {
	if uuo.addrecruitee_id == nil {
		uuo.addrecruitee_id = &i
	} else {
		*uuo.addrecruitee_id += i
	}
	return uuo
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return uuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	selector := sql.Select(user.Columns...).From(sql.Table(user.Table))
	user.ID(uuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = uuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		u = &User{config: uuo.config}
		if err := u.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into User: %v", err)
		}
		id = u.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("User with id: %v", uuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one User with the same id: %v", uuo.id)
	}

	tx, err := uuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		builder = sql.Update(user.Table).Where(sql.InInts(user.FieldID, ids...))
	)
	if value := uuo.username; value != nil {
		builder.Set(user.FieldUsername, *value)
		u.Username = *value
	}
	if value := uuo.password; value != nil {
		builder.Set(user.FieldPassword, *value)
		u.Password = *value
	}
	if value := uuo.role_id; value != nil {
		builder.Set(user.FieldRoleID, *value)
		u.RoleID = *value
	}
	if value := uuo.addrole_id; value != nil {
		builder.Add(user.FieldRoleID, *value)
		u.RoleID += *value
	}
	if value := uuo.is_enabled; value != nil {
		builder.Set(user.FieldIsEnabled, *value)
		u.IsEnabled = *value
	}
	if value := uuo.should_start_id; value != nil {
		builder.Set(user.FieldShouldStartID, *value)
		u.ShouldStartID = *value
	}
	if value := uuo.addshould_start_id; value != nil {
		builder.Add(user.FieldShouldStartID, *value)
		u.ShouldStartID += *value
	}
	if uuo.clearshould_start_id {
		var value int
		u.ShouldStartID = value
		builder.SetNull(user.FieldShouldStartID)
	}
	if value := uuo.comments; value != nil {
		builder.Set(user.FieldComments, *value)
		u.Comments = *value
	}
	if value := uuo.recruitee_id; value != nil {
		builder.Set(user.FieldRecruiteeID, *value)
		u.RecruiteeID = *value
	}
	if value := uuo.addrecruitee_id; value != nil {
		builder.Add(user.FieldRecruiteeID, *value)
		u.RecruiteeID += *value
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return u, nil
}
