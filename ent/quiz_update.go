// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/calinpristavu/quizzer/ent/predicate"
	"github.com/calinpristavu/quizzer/ent/quiz"
	"github.com/facebookincubator/ent/dialect/sql"
)

// QuizUpdate is the builder for updating Quiz entities.
type QuizUpdate struct {
	config
	name       *string
	active     *bool
	score      *uint
	addscore   *uint
	corrected  *bool
	predicates []predicate.Quiz
}

// Where adds a new predicate for the builder.
func (qu *QuizUpdate) Where(ps ...predicate.Quiz) *QuizUpdate {
	qu.predicates = append(qu.predicates, ps...)
	return qu
}

// SetName sets the name field.
func (qu *QuizUpdate) SetName(s string) *QuizUpdate {
	qu.name = &s
	return qu
}

// SetActive sets the active field.
func (qu *QuizUpdate) SetActive(b bool) *QuizUpdate {
	qu.active = &b
	return qu
}

// SetNillableActive sets the active field if the given value is not nil.
func (qu *QuizUpdate) SetNillableActive(b *bool) *QuizUpdate {
	if b != nil {
		qu.SetActive(*b)
	}
	return qu
}

// SetScore sets the score field.
func (qu *QuizUpdate) SetScore(u uint) *QuizUpdate {
	qu.score = &u
	qu.addscore = nil
	return qu
}

// AddScore adds u to score.
func (qu *QuizUpdate) AddScore(u uint) *QuizUpdate {
	if qu.addscore == nil {
		qu.addscore = &u
	} else {
		*qu.addscore += u
	}
	return qu
}

// SetCorrected sets the corrected field.
func (qu *QuizUpdate) SetCorrected(b bool) *QuizUpdate {
	qu.corrected = &b
	return qu
}

// SetNillableCorrected sets the corrected field if the given value is not nil.
func (qu *QuizUpdate) SetNillableCorrected(b *bool) *QuizUpdate {
	if b != nil {
		qu.SetCorrected(*b)
	}
	return qu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (qu *QuizUpdate) Save(ctx context.Context) (int, error) {
	return qu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuizUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuizUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuizUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qu *QuizUpdate) sqlSave(ctx context.Context) (n int, err error) {
	selector := sql.Select(quiz.FieldID).From(sql.Table(quiz.Table))
	for _, p := range qu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = qu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := qu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		builder = sql.Update(quiz.Table).Where(sql.InInts(quiz.FieldID, ids...))
	)
	if value := qu.name; value != nil {
		builder.Set(quiz.FieldName, *value)
	}
	if value := qu.active; value != nil {
		builder.Set(quiz.FieldActive, *value)
	}
	if value := qu.score; value != nil {
		builder.Set(quiz.FieldScore, *value)
	}
	if value := qu.addscore; value != nil {
		builder.Add(quiz.FieldScore, *value)
	}
	if value := qu.corrected; value != nil {
		builder.Set(quiz.FieldCorrected, *value)
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// QuizUpdateOne is the builder for updating a single Quiz entity.
type QuizUpdateOne struct {
	config
	id        int
	name      *string
	active    *bool
	score     *uint
	addscore  *uint
	corrected *bool
}

// SetName sets the name field.
func (quo *QuizUpdateOne) SetName(s string) *QuizUpdateOne {
	quo.name = &s
	return quo
}

// SetActive sets the active field.
func (quo *QuizUpdateOne) SetActive(b bool) *QuizUpdateOne {
	quo.active = &b
	return quo
}

// SetNillableActive sets the active field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableActive(b *bool) *QuizUpdateOne {
	if b != nil {
		quo.SetActive(*b)
	}
	return quo
}

// SetScore sets the score field.
func (quo *QuizUpdateOne) SetScore(u uint) *QuizUpdateOne {
	quo.score = &u
	quo.addscore = nil
	return quo
}

// AddScore adds u to score.
func (quo *QuizUpdateOne) AddScore(u uint) *QuizUpdateOne {
	if quo.addscore == nil {
		quo.addscore = &u
	} else {
		*quo.addscore += u
	}
	return quo
}

// SetCorrected sets the corrected field.
func (quo *QuizUpdateOne) SetCorrected(b bool) *QuizUpdateOne {
	quo.corrected = &b
	return quo
}

// SetNillableCorrected sets the corrected field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableCorrected(b *bool) *QuizUpdateOne {
	if b != nil {
		quo.SetCorrected(*b)
	}
	return quo
}

// Save executes the query and returns the updated entity.
func (quo *QuizUpdateOne) Save(ctx context.Context) (*Quiz, error) {
	return quo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuizUpdateOne) SaveX(ctx context.Context) *Quiz {
	q, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return q
}

// Exec executes the query on the entity.
func (quo *QuizUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuizUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (quo *QuizUpdateOne) sqlSave(ctx context.Context) (q *Quiz, err error) {
	selector := sql.Select(quiz.Columns...).From(sql.Table(quiz.Table))
	quiz.ID(quo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = quo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		q = &Quiz{config: quo.config}
		if err := q.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Quiz: %v", err)
		}
		id = q.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Quiz with id: %v", quo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Quiz with the same id: %v", quo.id)
	}

	tx, err := quo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		builder = sql.Update(quiz.Table).Where(sql.InInts(quiz.FieldID, ids...))
	)
	if value := quo.name; value != nil {
		builder.Set(quiz.FieldName, *value)
		q.Name = *value
	}
	if value := quo.active; value != nil {
		builder.Set(quiz.FieldActive, *value)
		q.Active = *value
	}
	if value := quo.score; value != nil {
		builder.Set(quiz.FieldScore, *value)
		q.Score = *value
	}
	if value := quo.addscore; value != nil {
		builder.Add(quiz.FieldScore, *value)
		q.Score += *value
	}
	if value := quo.corrected; value != nil {
		builder.Set(quiz.FieldCorrected, *value)
		q.Corrected = *value
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return q, nil
}
