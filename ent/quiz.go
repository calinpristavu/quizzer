// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Quiz is the model entity for the Quiz schema.
type Quiz struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Score holds the value of the "score" field.
	Score uint `json:"score,omitempty"`
	// Corrected holds the value of the "corrected" field.
	Corrected bool `json:"corrected,omitempty"`
}

// FromRows scans the sql response data into Quiz.
func (q *Quiz) FromRows(rows *sql.Rows) error {
	var vq struct {
		ID        int
		Name      sql.NullString
		Active    sql.NullBool
		Score     sql.NullInt64
		Corrected sql.NullBool
	}
	// the order here should be the same as in the `quiz.Columns`.
	if err := rows.Scan(
		&vq.ID,
		&vq.Name,
		&vq.Active,
		&vq.Score,
		&vq.Corrected,
	); err != nil {
		return err
	}
	q.ID = vq.ID
	q.Name = vq.Name.String
	q.Active = vq.Active.Bool
	q.Score = uint(vq.Score.Int64)
	q.Corrected = vq.Corrected.Bool
	return nil
}

// Update returns a builder for updating this Quiz.
// Note that, you need to call Quiz.Unwrap() before calling this method, if this Quiz
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Quiz) Update() *QuizUpdateOne {
	return (&QuizClient{q.config}).UpdateOne(q)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (q *Quiz) Unwrap() *Quiz {
	tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Quiz is not a transactional entity")
	}
	q.config.driver = tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Quiz) String() string {
	var builder strings.Builder
	builder.WriteString("Quiz(")
	builder.WriteString(fmt.Sprintf("id=%v", q.ID))
	builder.WriteString(", name=")
	builder.WriteString(q.Name)
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", q.Active))
	builder.WriteString(", score=")
	builder.WriteString(fmt.Sprintf("%v", q.Score))
	builder.WriteString(", corrected=")
	builder.WriteString(fmt.Sprintf("%v", q.Corrected))
	builder.WriteByte(')')
	return builder.String()
}

// Quizs is a parsable slice of Quiz.
type Quizs []*Quiz

// FromRows scans the sql response data into Quizs.
func (q *Quizs) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vq := &Quiz{}
		if err := vq.FromRows(rows); err != nil {
			return err
		}
		*q = append(*q, vq)
	}
	return nil
}

func (q Quizs) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}
