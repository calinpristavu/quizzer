// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// RoleID holds the value of the "role_id" field.
	RoleID int `json:"role_id,omitempty"`
	// IsEnabled holds the value of the "is_enabled" field.
	IsEnabled bool `json:"is_enabled,omitempty"`
	// ShouldStartID holds the value of the "should_start_id" field.
	ShouldStartID int `json:"should_start_id,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// RecruiteeID holds the value of the "recruitee_id" field.
	RecruiteeID int `json:"recruitee_id,omitempty"`
}

// FromRows scans the sql response data into User.
func (u *User) FromRows(rows *sql.Rows) error {
	var vu struct {
		ID            int
		Username      sql.NullString
		Password      sql.NullString
		RoleID        sql.NullInt64
		IsEnabled     sql.NullBool
		ShouldStartID sql.NullInt64
		Comments      sql.NullString
		RecruiteeID   sql.NullInt64
	}
	// the order here should be the same as in the `user.Columns`.
	if err := rows.Scan(
		&vu.ID,
		&vu.Username,
		&vu.Password,
		&vu.RoleID,
		&vu.IsEnabled,
		&vu.ShouldStartID,
		&vu.Comments,
		&vu.RecruiteeID,
	); err != nil {
		return err
	}
	u.ID = vu.ID
	u.Username = vu.Username.String
	u.Password = vu.Password.String
	u.RoleID = int(vu.RoleID.Int64)
	u.IsEnabled = vu.IsEnabled.Bool
	u.ShouldStartID = int(vu.ShouldStartID.Int64)
	u.Comments = vu.Comments.String
	u.RecruiteeID = int(vu.RecruiteeID.Int64)
	return nil
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", u.RoleID))
	builder.WriteString(", is_enabled=")
	builder.WriteString(fmt.Sprintf("%v", u.IsEnabled))
	builder.WriteString(", should_start_id=")
	builder.WriteString(fmt.Sprintf("%v", u.ShouldStartID))
	builder.WriteString(", comments=")
	builder.WriteString(u.Comments)
	builder.WriteString(", recruitee_id=")
	builder.WriteString(fmt.Sprintf("%v", u.RecruiteeID))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

// FromRows scans the sql response data into Users.
func (u *Users) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vu := &User{}
		if err := vu.FromRows(rows); err != nil {
			return err
		}
		*u = append(*u, vu)
	}
	return nil
}

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
