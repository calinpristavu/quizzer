// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/calinpristavu/quizzer/ent/predicate"
	"github.com/calinpristavu/quizzer/ent/quiz"
	"github.com/facebookincubator/ent/dialect/sql"
)

// QuizDelete is the builder for deleting a Quiz entity.
type QuizDelete struct {
	config
	predicates []predicate.Quiz
}

// Where adds a new predicate to the delete builder.
func (qd *QuizDelete) Where(ps ...predicate.Quiz) *QuizDelete {
	qd.predicates = append(qd.predicates, ps...)
	return qd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qd *QuizDelete) Exec(ctx context.Context) (int, error) {
	return qd.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (qd *QuizDelete) ExecX(ctx context.Context) int {
	n, err := qd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qd *QuizDelete) sqlExec(ctx context.Context) (int, error) {
	var res sql.Result
	selector := sql.Select().From(sql.Table(quiz.Table))
	for _, p := range qd.predicates {
		p(selector)
	}
	query, args := sql.Delete(quiz.Table).FromSelect(selector).Query()
	if err := qd.driver.Exec(ctx, query, args, &res); err != nil {
		return 0, err
	}
	affected, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	return int(affected), nil
}

// QuizDeleteOne is the builder for deleting a single Quiz entity.
type QuizDeleteOne struct {
	qd *QuizDelete
}

// Exec executes the deletion query.
func (qdo *QuizDeleteOne) Exec(ctx context.Context) error {
	n, err := qdo.qd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &ErrNotFound{quiz.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qdo *QuizDeleteOne) ExecX(ctx context.Context) {
	qdo.qd.ExecX(ctx)
}
